// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract LLClub is ERC721Enumerable, Ownable {
  
  using Strings for uint256;
  string public baseURI ;
  string public baseExtension = ".json";
  uint256 public constant BeforeTwoThousand = 60000000000000000; // 0.06 ether;
  uint256 public constant AfterTwoThousand = 90000000000000000; // 0.09 ether; 

  uint256 public maxSupply = 9999;
  bool public paused = false;
  bool public revealed = false;
  string public notRevealedUri;

  using Counters for Counters.Counter;
  Counters.Counter private _tokenIds;

  constructor(
    string memory _name,
    string memory _symbol,
    string memory _initBaseURI,
    string memory _initNotRevealedUri
  ) ERC721(_name, _symbol) {
    _baseURI(_initBaseURI);
    setNotRevealedURI(_initNotRevealedUri);
  }

  function _baseURI() internal view virtual override returns (string memory) {
    return baseURI;
  }

  function mint(address _to, uint256 _mintAmount) public payable {
    uint256 supply = totalSupply();
    require(!paused);
    require(_mintAmount > 0);
    require(msg.value >= BeforeTwoThousand,"Ether value sent is not correct");
    require(supply + _mintAmount <= maxSupply,"You cannot Mint more than 9999 NFT's");

    uint256 newItemId = _tokenIds.current();
    _tokenIds.increment();
    
    if(newItemId <= 2000){
        require(msg.value >= BeforeTwoThousand * _mintAmount, "before pay price of nft BeforeTwoThousand"); }
    else{
        require(msg.value >= AfterTwoThousand * _mintAmount, "pay price of nft AfterTwoThousand"); 
        }

    for (uint256 i = 1; i <= _mintAmount; i++) {
      _safeMint(_to, supply + i);
    }
  }

  function walletOfOwner(address _owner) public view returns (uint256[] memory)
  {
    uint256 ownerTokenCount = balanceOf(_owner);
    uint256[] memory tokenIds = new uint256[](ownerTokenCount);
    for (uint256 i; i < ownerTokenCount; i++) {
      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
    }
    return tokenIds;
  }

  function tokenURI(uint256 tokenId) public view virtual override returns (string memory)
  {
    require(_exists(tokenId),
      "ERC721Metadata: URI query for nonexistent token");
    
    if(revealed == false) {
        return notRevealedUri;
    }
    
    string memory currentBaseURI = _baseURI();
    return bytes(currentBaseURI).length > 0
        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))
        : "";
  }

  function reveal() public onlyOwner {
      revealed = true;
  }

  function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
    notRevealedUri = _notRevealedURI;
  }

  function _baseURI(string memory _newBaseURI) public onlyOwner {
    baseURI = _newBaseURI;
  }

  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
    baseExtension = _newBaseExtension;
  }

  function count() public view returns (uint256){
    return _tokenIds.current();
        }
}


